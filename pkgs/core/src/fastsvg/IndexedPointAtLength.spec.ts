import pal from 'point-at-length'
import { SVGDCommand, indexedPointAtLength } from './IndexedPointAtLength'
import { vectorPathPointsToSVGPathString } from '@/index-ext-brush'

describe('IndexedPointAtLength', () => {
  const path = complexPath()

  describe('.lengthOfVertex', () => {
    it.each([
      [1, 'M0,0 L10,10'],
      [2, 'M0,0 L10,10 L20,20'],
      [3, 'M0,0 C10,10 10,10 10,10'],
    ])('should be returns equal value to totalLength: %d', (_, path) => {
      const cached = indexedPointAtLength(path)
      expect(cached.lengthOfVertex(cached.vertexCount - 1)).toEqual(
        cached.totalLength,
      )
    })
  })

  describe('.at / .atBatch', () => {
    it('should be correctly sorted lengthCache and lengthCacheDetail', () => {
      const cached = indexedPointAtLength(path)

      expect(cached._lengthAtSubvert).toEqual(
        [...cached._lengthAtSubvert].sort((a, b) => a - b),
      )

      expect(cached._lengthAtSubvert).toHaveLength(cached._subvertIndex.length)
    })

    it('should work with pointsToSVGCommandArray', () => {
      const pal = indexedPointAtLength(
        vectorPathPointsToSVGPathString([
          {
            isMoveTo: true,
            x: 0,
            y: 0,
          },
          {
            x: 1000,
            y: 1000,
            begin: { x: 333.3333333333333, y: 666.6666666666667 },
            end: { x: 666.6666666666667, y: 666.6666666666667 },
          },
        ]),
      )

      expect(pal.at(pal.totalLength)).toEqual([1000, 1000])
    })

    it.each(
      // prettier-ignore
      [
        [1, path],
        [2, [['M', 0, 0],['L', 1000, 1000]] satisfies SVGDCommand[]]
      ],
    )('should be returns same result to point-at-length: %d', (_, input) => {
      const original = pal(input)
      const cached = indexedPointAtLength(input)
      const length = cached.totalLength

      expect(length).toBeCloseTo(original.length(), 2)

      for (let i = 0; i < length; i += length / 500) {
        const origP = original.at(i)
        const point = cached.at(i)
        expect(point[0], `pos x: ${i}`).toBeCloseTo(origP[0], 2)
        expect(point[1], `pos y: ${i}`).toBeCloseTo(origP[1], 2)
      }
    })

    it('noBinsearch should be returns same to binsearch result', () => {
      const get = indexedPointAtLength(path)
      const length = get.totalLength

      for (let pos = 0, i = 0; pos < length; pos += length / 500, i++) {
        const point = get.at(pos)
        const nobin = get.at(pos, { noBinsearch: true })
        expect(point, `pos: ${i}(${pos}): `).toEqual(nobin)
      }
    })

    it('.atBatch should be returns same result to .at', () => {
      const pal = indexedPointAtLength(path)
      const length = pal.totalLength

      const req: number[] = []
      const atResults: any[] = []

      for (let i = 0; i < length; i += length / 500) req.push(i)
      for (const at of req) atResults.push(pal.atWithDetail(at))

      const atBatchResults = pal.atBatch(req)
      expect(atBatchResults).toEqual(atResults)
    })

    it('.atBatch should be returns expected length', () => {
      const pal = indexedPointAtLength(path)
      const length = pal.totalLength

      const req: number[] = Array.from(
        { length: Math.floor(length) },
        (_, i) => i,
      )
      const atBatchResults = pal.atBatch(req)

      expect(atBatchResults).toHaveLength(Math.floor(length))
    })

    // it.only('.atBatch should be returns same result to .at (breaking case)', () => {
    //   const req = [
    //     0, 0.01, 1, 1.01, 2, 2.01, 3, 3.01, 4, 4.01, 5, 5.01, 6, 6.01, 7, 7.01, 8,
    //     8.01, 9, 9.01, 10, 10.01, 11, 11.01, 12, 12.01, 13, 13.01, 14, 14.01,
    //     14.142135623730951
    //   ]

    //   const pal = indexedPointAtLength('M0,0 L10,10')
    //   const atResults: any[] = []

    //   console.log(pal._subvertIndex)

    //   for (const at of req) atResults.push(pal.atWithDetail(at))

    //   const atBatchResults = pal.atBatch(req)
    //   expect(atBatchResults).toEqual(atResults)
    // })

    describe('line', () => {
      it('Should not return NaN', () => {
        const line = 'M0,0 C 50,50 50,50 50,50 L100,100'
        const cached = indexedPointAtLength(line)

        expect(cached.totalLength).not.toBeNaN()

        const pt = cached.at(0.5)
        expect(pt[0]).not.toBeNaN()
        expect(pt[1]).not.toBeNaN()
      })
    })
  })

  describe('getSequencialReader', () => {
    it('should returns same result to .at()', () => {
      const pal = indexedPointAtLength(path)
      const seqPal = pal.getSequencialReader()

      expect(seqPal.at(0)).toEqual(pal.at(0))
      expect(seqPal.at(50)).toEqual(pal.at(50))
      expect(seqPal.at(100)).toEqual(pal.at(100))
    })
  })

  describe('performance', () => {
    it('indexing time', () => {
      const buildTime = time(() => {
        indexedPointAtLength(path)
      })

      console.info(`Indexing time: ${buildTime}ms`)
    })

    it('methods', async () => {
      const times = 5000

      // Native
      /*
        function perf() {
          const path = document.createElementNS(
            'http://www.w3.org/2000/svg',
            'path',
          )
          path.setAttribute('d', complexPath())
          document.body.appendChild(path)

          const totalLength = path.getTotalLength()

          let start = performance.now()
          for (let i = 0; i < 5000; i++) {
            path.getPointAtLength(totalLength * (i / 5000))
          }
          console.info(`Native 5000times: ${performance.now() - start}ms`)

          function complexPath() {
            return `
              M713.328125,350.9140625
              C713.328125,421.70197509723874,722.5525019789692,519.7390096746306,702.96484375,586.0859375
              C689.6535495867756,631.1736893275031,672.9378693749323,660.0908042801916,645.3515625,699.60546875
              C572.9328950136194,803.338069132086,445.2718097475105,920.0715451277504,307.859375,874.52734375
              C267.5079968860733,861.1532172084883,251.47947704556285,849.462709960477,221.578125,821.66796875
              C187.23374360529658,789.7432186101026,149.72388637999302,739.7489139317611,150.40234375,690.13671875
              C151.39275500558068,617.7128956856633,222.88700788434312,542.0417626730251,276.9765625,501.7421875
              C332.63319068717357,460.2750597441197,397.1507732887845,430.82221773673825,468.13671875,430.82421875
              C573.9319424560133,430.8272009973208,708.1569369804935,504.6365528630434,747.40625,608.3046875
              C766.638890836565,659.1033345662133,743.1364826668837,718.8025540325696,714.8125,760.23046875
              C689.6409719303243,797.0474633952191,650.166027898789,840.9831943883817,610.78515625,863.91015625
              C514.6072353221002,919.9035213717573,390.30850627882876,859.2751524956966,348.50390625,762.97265625
              C304.818924083026,662.3384478560153,372.1360320022822,537.8353079876072,469.21875,497.15625
              C516.3553204163127,477.40534766795787,576.9646817481793,479.3326861278903,620.09375,507.27734375
              C630.3585461643299,513.9282227510977,664.5050392671657,546.2530862119378,655.2109375,562.05078125
              C649.583119225819,571.6166929488836,605.8978497224218,568.2853908166342,601.48046875,567.76171875
              C551.4944063045808,561.8359666387114,498.7583879849199,510.72380373961494,535.75,460.48828125
              C557.2984759656335,431.2249188275348,588.3509107292192,408.23277148019474,618.80078125,389.23046875
              C666.5052297832393,359.4604120271984,717.4627410794914,332.2675800126234,762.33203125,385.8984375
              C769.4792672274979,394.4413048527307,776.0913720520524,403.57148806662565,781.24609375,413.4453125
              C787.0551765415247,424.5725598983006,791.6151521353901,436.41203761084324,795.01171875,448.49609375
              C819.2520844836557,534.7366930361188,761.7601352767597,618.8244270598826,691.8046875,663.58984375
              C590.5064169848613,728.4119474419,434.5333072550254,731.1816518419369,355.05078125,630.15625
              C298.1034327588257,557.773940902401,323.749512057543,408.29160561643636,427.23046875,395.54296875
            `
          }
        }
        perf()
      */

      const originalTime = time(() => {
        const original = pal(path)
        const totalLength = original.length()

        for (let i = 0; i < times; i++) {
          original.at(totalLength * (i / times))
        }
      })

      const normalTime = time(() => {
        const normal = indexedPointAtLength(path)

        for (let i = 0; i < times; i++) {
          normal.at(normal.totalLength * (i / times))
        }
      })

      await sleep(200)

      const batchTime = time(() => {
        const pal = indexedPointAtLength(path)

        const req: number[] = []
        const len = pal.totalLength

        for (let i = 0; i < times; i++) {
          req.push(len * (i / times))
        }

        pal.atBatch(req)
      })

      await sleep(200)

      const noBinsearchTime = time(() => {
        const opt = { noBinsearch: true }
        const normal = indexedPointAtLength(path)

        for (let i = 0; i < times; i++) {
          normal.at(normal.totalLength * (i / times), opt)
        }
      })

      await sleep(200)

      const sequencialTime = time(() => {
        const normal = indexedPointAtLength(path)
        const sequencial = normal.getSequencialReader()
        const opt = { seek: true }

        for (let i = 0; i < times; i++) {
          sequencial.at(sequencial.totalLength * (i / times), opt)
        }
      })

      console.log(`original point-at-length ${times}times: ${originalTime}ms`)
      console.log(
        `normal(disable binsearch) ${times}times: ${noBinsearchTime}ms`,
      )
      console.log(`normal ${times}times: ${normalTime}ms`)
      console.log(`batchTime ${times}points: ${batchTime}ms`)
      console.log(`sequencial ${times}times: ${sequencialTime}ms`)
      console.log(
        `faster (normal vs cached): ${formatNumber(
          normalTime - sequencialTime,
        )}`,
      )
    })
  })
})

function time(fn: () => void) {
  const start = performance.now()
  fn()
  return formatNumber(performance.now() - start)
}

function sleep(ms: number) {
  return new Promise((resolve) => setTimeout(resolve, ms))
}

function formatNumber(num: number) {
  return Math.round(num * 10 ** 3) / 10 ** 3
}

function complexPath() {
  return `
    M713.328125,350.9140625
    C713.328125,421.70197509723874,722.5525019789692,519.7390096746306,702.96484375,586.0859375
    C689.6535495867756,631.1736893275031,672.9378693749323,660.0908042801916,645.3515625,699.60546875
    C572.9328950136194,803.338069132086,445.2718097475105,920.0715451277504,307.859375,874.52734375
    C267.5079968860733,861.1532172084883,251.47947704556285,849.462709960477,221.578125,821.66796875
    C187.23374360529658,789.7432186101026,149.72388637999302,739.7489139317611,150.40234375,690.13671875
    C151.39275500558068,617.7128956856633,222.88700788434312,542.0417626730251,276.9765625,501.7421875
    C332.63319068717357,460.2750597441197,397.1507732887845,430.82221773673825,468.13671875,430.82421875
    C573.9319424560133,430.8272009973208,708.1569369804935,504.6365528630434,747.40625,608.3046875
    C766.638890836565,659.1033345662133,743.1364826668837,718.8025540325696,714.8125,760.23046875
    C689.6409719303243,797.0474633952191,650.166027898789,840.9831943883817,610.78515625,863.91015625
    C514.6072353221002,919.9035213717573,390.30850627882876,859.2751524956966,348.50390625,762.97265625
    C304.818924083026,662.3384478560153,372.1360320022822,537.8353079876072,469.21875,497.15625
    C516.3553204163127,477.40534766795787,576.9646817481793,479.3326861278903,620.09375,507.27734375
    C630.3585461643299,513.9282227510977,664.5050392671657,546.2530862119378,655.2109375,562.05078125
    C649.583119225819,571.6166929488836,605.8978497224218,568.2853908166342,601.48046875,567.76171875
    C551.4944063045808,561.8359666387114,498.7583879849199,510.72380373961494,535.75,460.48828125
    C557.2984759656335,431.2249188275348,588.3509107292192,408.23277148019474,618.80078125,389.23046875
    C666.5052297832393,359.4604120271984,717.4627410794914,332.2675800126234,762.33203125,385.8984375
    C769.4792672274979,394.4413048527307,776.0913720520524,403.57148806662565,781.24609375,413.4453125
    C787.0551765415247,424.5725598983006,791.6151521353901,436.41203761084324,795.01171875,448.49609375
    C819.2520844836557,534.7366930361188,761.7601352767597,618.8244270598826,691.8046875,663.58984375
    C590.5064169848613,728.4119474419,434.5333072550254,731.1816518419369,355.05078125,630.15625
    C298.1034327588257,557.773940902401,323.749512057543,408.29160561643636,427.23046875,395.54296875
  `

  return `
    M38.169,96.8065
    C 38.169,131.5498 35.6639,167.19459999999998 39.500499999999995 201.72050000000002
    C 42.371599999999994,227.5576 50.2825,252.3829 53.046699999999994 278.2597
    C 60.70309999999999,349.9344 67.42559999999999,422.4005 81.115 493.2152
    C 87.8256,527.9289 95.69959999999999,562.6148 103.3399 597.1406
    C 105.9211,608.8045999999999 109.9996,620.1493999999999 111.699 632.0055
    C 113.6246,645.4399 112.7864,658.9071 113.1875 672.404
    C 114.404,713.3492 113.687,754.3305 114.7853 795.2913
    C 116.0122,841.0486999999999 140.1821,911.2361999999999 158.00830000000002 954.6943
    C 165.77820000000003,973.6363 177.64770000000001,995.851 198.41340000000002 1003.5258
    C 208.47990000000001,1007.2463 222.00790000000003,1005.1682 232.46200000000002 1005.1044
    C 257.92490000000004,1004.9488 284.27520000000004,1001.4742000000001 308.9875 995.4157
    C 328.3833,990.6606 346.6556,981.3702000000001 365.8835 975.9854
    C 400.3152,966.3427 435.2533,968.6832 470.2961 962.907
    C 504.398,957.2859000000001 537.2426,945.7501000000001 571.2668 939.5104
    C 593.5531,935.4233 616.0953,933.4287 638.424 929.628
    C 673.3922,923.6758000000001 707.4997999999999,914.1706 742.2242 907.2478000000001
    C 760.6591999999999,903.5725000000001 779.8217,904.4212000000001 797.9793999999999 899.3923000000001
    C 814.2804,894.8776000000001 828.8861999999999,883.1945000000001 843.933 875.5749000000001
    C 855.1938,869.8725000000001 867.691,865.8516000000001 876.2094 855.9866000000001
    C 889.5423999999999,840.5457000000001 888.1604,813.5527000000001 888.8859 795.0345000000001
    C 890.2051,761.3606000000001 894.7913,728.6980000000001 899.0382999999999 695.3364000000001
    C 903.1179999999999,663.2892000000002 906.2796,631.9453000000001 915.1407999999999 600.6982000000002
    C 918.1175,590.2017000000002 924.6928999999999,581.8445000000002 929.0230999999999 572.1977000000002
    C 931.1901999999999,567.3698000000002 929.0230999999999,555.2096000000001 929.0230999999999 550.3740000000001
    C 929.0230999999999,536.6260000000001 929.0230999999999,522.8781000000001 929.0230999999999 509.13010000000014
    C 929.0230999999999,481.51800000000014 924.1542999999999,455.02140000000014 920.2006999999999 427.77550000000014
    C 917.2543999999999,407.47140000000013 916.7331999999999,385.60270000000014 911.6983999999999 365.69870000000014
    C 903.7118999999999,334.1259000000001 897.3069999999999,302.90880000000016 893.9313999999998 270.36270000000013
    C 889.6928999999998,229.49630000000013 883.2614999999998,189.4674000000001 876.9490999999998 148.83200000000014
    C 873.7099999999998,127.98040000000013 870.2780999999998,124.58400000000013 862.6789999999999 107.50570000000013
    C 861.5435999999999,104.95390000000013 859.9912999999999,96.41870000000013 857.3227999999999 94.65640000000013
    C 855.0742999999999,93.17150000000014 845.3824999999999,94.62840000000013 843.4014 94.62840000000013
    C 831.3494999999999,94.62840000000013 819.4232,93.38830000000013 807.3692 93.15100000000012
    C 755.5426,92.13090000000012 703.588,93.15100000000012 651.7519 93.15100000000012
    C 610.5437,93.15100000000012 569.4984,92.92710000000012 528.3714 96.02990000000013
    C 476.0731,99.97550000000012 424.2923,108.26180000000012 372.2732 114.61770000000013
    C 321.1654,120.86220000000013 269.98749999999995,123.72610000000013 219.03309999999996 131.56220000000013
    C 172.15159999999997,138.77200000000013 122.33329999999997,134.49600000000012 76.22229999999996 145.46030000000013
    C 75.40909999999997,145.65370000000013 76.22229999999996,147.13210000000012 76.22229999999996 147.96800000000013
    C 76.22229999999996,151.06930000000014 76.03069999999997,154.17650000000012 76.22229999999996 157.27180000000013
    C 77.33819999999996,175.30200000000013 86.57279999999996,193.40290000000013 92.41149999999996 210.15260000000012
    C 102.87419999999996,240.16730000000013 112.96549999999996,269.59320000000014 126.74809999999997 298.3348000000001
    C 144.16399999999996,334.6532000000001 164.13739999999996,369.09890000000007 177.56709999999998 407.2476000000001
    C 194.81529999999998,456.2435000000001 200.8438,507.66280000000006 209.33459999999997 558.6713000000001
    C 218.84649999999996,615.8141 230.83309999999997,671.5984000000001 233.12669999999997 729.6120000000001
    C 233.96149999999997,750.7262000000001 231.72519999999997,772.0745000000001 233.12669999999997 793.1540000000001
    C 234.12779999999998,808.2121000000001 236.71809999999996,823.2170000000001 236.71809999999996 838.3082000000002
    C 236.71809999999996,854.0679000000001 233.06309999999996,879.8808000000001 236.71809999999996 894.4811000000002
    C 236.95059999999995,895.4099000000002 238.22049999999996,893.2895000000002 239.02189999999996 892.7657000000002
    C 240.34829999999997,891.8987000000002 241.59979999999996,890.8934000000002 243.02649999999997 890.2038000000001
    C 245.68679999999998,888.9181000000001 248.37789999999998,887.6094000000002 251.23659999999998 886.8623000000001
    C 260.9154,884.3327000000002 275.6764,883.4779000000001 284.93859999999995 882.7206000000001
    C 325.72049999999996,879.3863000000001 365.80609999999996,874.3804000000001 406.09459999999996 867.0455000000001
    C 465.24309999999997,856.2769000000001 525.1488999999999,845.8358000000001 584.9561 839.3032000000001
    C 619.7345,835.5044 654.6722,832.0490000000001 689.5044 828.5472000000001
    C 698.2914000000001,827.6638 707.4667000000001,828.7327000000001 716.1483000000001 827.0719000000001
    C 745.4784000000001,821.4612000000002 768.4732,802.2147000000001 795.349 790.6345000000001
    C 808.8489000000001,784.8177000000002 822.812,783.8601000000001 836.8356 781.1162000000002
    C 837.0078,781.0825000000002 838.4715,773.4157000000001 838.5714 772.7410000000002
    C 839.9892000000001,763.1659000000002 840.4271,753.6995000000002 840.4271 744.0262000000002
    C 840.4271,706.4864000000002 835.6656,668.3112000000002 829.4356 631.2453000000003
    C 821.0419,581.3061000000002 802.5533,533.4430000000002 789.7845 484.4594000000003
    C 770.664,411.1095000000003 752.9381999999999,337.3820000000003 733.1237 264.22510000000034
    C 725.2687999999999,235.22420000000034 711.687,209.68770000000035 703.783 181.32070000000033
    C 701.3736,172.67360000000033 699.0668000000001,152.61690000000033 691.5572 146.7440000000003
    C 689.9376,145.47730000000033 684.3062,146.01150000000032 682.7452999999999 146.1855000000003
    C 668.1012,147.8178000000003 653.3676999999999,148.9057000000003 638.8581999999999 151.4725000000003
    C 615.4377999999999,155.61580000000032 592.7937999999999,163.4945000000003 569.4156999999999 167.8699000000003
    C 474.4903999999999,185.6358000000003 378.4118999999999,175.9057000000003 282.9110999999999 186.19560000000033
    C 260.77789999999993,188.58040000000034 238.89679999999993,192.40870000000032 216.62519999999992 193.32930000000033
    C 206.7523999999999,193.73740000000032 191.3868999999999,193.03730000000033 182.8877999999999 198.99940000000032
    C 178.13109999999992,202.33620000000033 181.94519999999991,210.59460000000033 181.94519999999991 216.4049000000003
    C 181.94519999999991,241.46250000000032 180.80659999999992,254.2773000000003 187.50379999999993 281.0013000000003
    C 200.94109999999992,334.6206000000003 218.69789999999992,389.9204000000003 238.70109999999994 441.95500000000027
    C 248.17399999999995,466.5969000000003 259.65279999999996,490.39440000000025 268.99229999999994 515.0898000000003
    C 285.2912999999999,558.1872000000003 294.3896,602.7523000000003 303.5238999999999 647.7525000000003
    C 308.2890999999999,671.2281000000003 310.90719999999993,698.6128000000003 321.1946999999999 720.4192000000003
    C 322.9828999999999,724.2096000000003 329.6451999999999,719.3462000000003 333.4399999999999 717.5675000000002
    C 345.2957999999999,712.0104000000002 352.2617999999999,707.0122000000002 365.1562999999999 702.5196000000002
    C 399.19979999999987,690.6584000000001 411.87199999999984,687.5350000000002 443.09409999999986 680.1763000000002
    C 472.71179999999987,673.1958000000002 501.96929999999986,666.5224000000002 532.2848999999999 663.4648000000002
    C 568.3673999999999,659.8256000000002 606.9033999999999,664.8866000000002 642.1482999999998 655.2437000000002
    C 663.9125999999999,649.2891000000002 681.0865999999999,637.2694000000002 699.3036999999998 625.3738000000002
    C 701.2101999999999,624.1289000000002 699.4267999999998,620.8211000000002 699.4267999999998 618.5441000000002
    C 699.4267999999998,606.2167000000002 699.4267999999998,593.8893000000002 699.4267999999998 581.5619000000002
    C 699.4267999999998,528.8713000000001 697.4813999999999,503.00150000000014 684.8074999999999 449.26350000000014
    C 673.9464999999999,403.21250000000015 656.8654999999999,362.2772000000001 636.9035999999999 319.6332000000001
    C 633.2178999999999,311.7596000000001 630.4882999999999,302.5571000000001 625.8317999999998 295.0924000000001
    C 625.4264999999998,294.4426000000001 619.3678999999998,295.6253000000001 619.3669999999998 295.6255000000001
    C 607.7530999999999,298.5004000000001 596.5307999999999,303.5929000000001 585.1672999999998 307.2122000000001
    C 543.0171999999999,320.6370000000001 499.55359999999985,332.53910000000013 456.4463999999998 342.4925000000001
    C 451.7975999999998,343.5659000000001 438.1094999999998,346.72930000000014 432.2272999999998 347.4144000000001
    C 401.0909999999998,351.0410000000001 366.1661999999998,338.2254000000001 342.3986999999998 365.3581000000001
    C 340.0180999999998,368.0757000000001 346.16329999999977,402.6013000000001 346.3118999999998 403.2671000000001
    C 353.99589999999984,437.68160000000006 364.5183999999998,471.7387000000001 373.5818999999998 505.7981000000001
    C 382.1544999999998,538.0130000000001 390.6735999999998,570.2828000000001 399.7199999999998 602.3694
    C 400.3198999999998,604.4972 403.7192999999998,620.3444000000001 407.7466999999998 622.6267
    C 414.2115999999998,626.2903 429.5781999999998,614.3331000000001 433.0134999999998 612.5541000000001
    C 458.5911999999998,599.3081000000001 484.8124999999998,592.1973 513.5890999999998 590.1453
    C 553.3176999999998,587.3123 588.9725999999998,588.9736 626.7437999999999 577.2203000000001
    C 637.3788999999998,573.9109000000001 649.8329999999999,572.2618000000001 658.2915999999999 564.4434000000001
    C 663.4602999999998,559.6659000000001 662.2577999999999,550.1167000000002 662.2797999999999 544.1027000000001
    C 662.3406999999999,527.4969000000001 662.4170999999999,510.8763000000001 662.2797999999999 494.2715000000001
    C 662.0994,472.4606000000001 661.4074999999999,450.3675000000001 658.3448999999999 428.73860000000013
    C 656.8705,418.3256000000001 653.5569999999999,403.2781000000001 643.2574 397.51260000000013
    C 629.8403999999999,390.00210000000015 597.819,400.34700000000015 584.2474 402.3415000000001
    C 566.3093,404.9777000000001 548.62,406.73340000000013 530.8208 410.3228000000001
    C 525.3403,411.4280000000001 519.8534999999999,412.5093000000001 514.342 413.4477000000001
    C 513.3282,413.6203000000001 505.2699,413.28480000000013 505.2691 413.4477000000001
    C 505.2039,426.0600000000001 507.1633,437.0252000000001 511.5897 448.8202000000001
    C 514.0822,455.4620000000001 517.3675,462.10070000000013 520.2172 468.5960000000001
    C 524.1564000000001,477.5749000000001 528.6160191406251,496.4284073242189 534.323419140625 504.4608073242189
  `

  // return `
  //   c -13.76 -4.75 -10.68 -29.12 -10.96 -45.12 -1.51 -87.16, 33.53 -176.77, 86.89 -245.24, 74.61 -95.74, 182.41 -142.99, 296.37 -80.86, 140.47, 76.59, 217.6, 244.86, 164.62, 398.7 -31.16, 90.48 -93.32, 161.54 -173.21, 215.02 -55.38,37.07-126.57,81.61-192.98,90.66-70.9,9.67-117.08-9.43-162.68-60.19-49.29-54.87-32.79-163.06-20.03-228.35,21.05-107.72,94.91-203.96,170.57-278.84,59.69-59.08,143.29-136.75,233.37-140.84,45.95-2.09,105.26,1.01,134.18,44.78,43.36,65.65,27.37,146.47-12.65,210.49-26.4,42.24-105.89,154.97-168.12,125.86-30.1-14.08-14.77-38.62-1.41-54.98,21.57-26.42,55.32-25.1,85.52-20.09,100.13,16.6,114.39,141.54,66.39,215.55-22.76,35.09-61.7,61.53-102.57,71.17-53.5,12.61-107.49-28.84-97.82-85.38,7.29-42.66,50.21-68.68,85.16-85.96,53.66-26.52,118.8-21.31,167.77,9.13,96.47,59.98,60.62,186.36-27.65,235.69-45.6,25.49-186.33,67.84-185.72-24.72.33-49.67,57.95-68.2,95.98-75.34,58.5-10.98,118.38,1.92,140.17,62.79,28.4,79.34-61.51,171-143.58,162.21-25.28-2.71-65.3-8.82-70.2-41.56-5.35-35.72,44.25-58.88,68.52-70.81,61.12-30.07,241.05-33.52,262.66,50.82,29.62,115.59-250.27,151.3-311.64,95.92-107.95-97.39,53.51-177.51,138.63-192.42,91.36-16,307.97-.53,307.84,130.78-.11,106.93-171.29,183.57-265.66,175.73-56.43-4.69-112.46-14.9-140.7-73.15-38.63-79.67,25.7-200.45,84.76-249.65,91.19-75.96,228.6-74.37,309.77,14.32,47.01,51.36,40.78,120.62,20.82,180.14-30.26,90.21-93.55,120.19-189.55,131.21-238.32,27.36-483.78-50.9-638.31-237.7
  // `
  // return `
  //   m 96.22,976.56
  //   c -13.76 -4.75 -10.68 -29.12 -10.96 -45.12
  //   c -1.51 -87.16 33.53 -176.77 86.89 -245.24
  //   c 74.61 -95.74 182.41 -142.99 296.37 -80.86
  //   c 140.47 76.59 217.6 244.86 164.62 398.7
  //   c -31.16 90.48 -93.32 161.54 -173.21 215.02
  //   c -55.38 37.07 -126.57 81.61 -192.98 90.66
  //   c -70.9 9.67 -117.08 -9.43 -162.68 -60.19
  //   c -49.29 -54.87 -32.79 -163.06 -20.03 -228.35
  //   c 21.05 -107.72 94.91 -203.96 170.57 -278.84
  //   c 59.69 -59.08 143.29 -136.75 233.37 -140.84
  //   c 45.95-2.09 105.26 1.01 134.18 44.78 43.36
  //   c 65.65 27.37 146.47 -12.65 210.49 -26.4 42.24
  //   c -105.89 154.97 -168.12 125.86 -30.1 -14.08 -14.77
  //   c -38.62 -1.41 -54.98 21.57 -26.42 55.32
  //   c -25.1 85.52 -20.09 100.13 16.6 114.39
  //   c 141.54 66.39 215.55 -22.76 35.09 -61.7
  //   c 61.53 -102.57 71.17 -53.5 12.61 -107.49
  //   c -28.84 -97.82 -85.38 7.29 -42.66 50.21
  //   c -68.68 85.16 -85.96 53.66 -26.52
  //   c 118.8 -21.31 167.77 9.13 96.47 59.98
  //   c 60.62 186.36 -27.65 235.69 -45.6 25.49
  //   c -186.33 67.84 -185.72 -24.72.33 -49.67
  //   c 57.95 -68.2 95.98 -75.34 58.5 -10.98
  //   c 118.38 1.92 140.17 62.79 28.4 79.34
  //   c -61.51 171 -143.58 162.21 -25.28 -2.71 -65.3
  //   c -8.82 -70.2 -41.56 -5.35 -35.72 44.25
  //   c -58.88 68.52 -70.81 61.12 -30.07 241.05
  //   c -33.52 262.66 50.82 29.62 115.59 -250.27
  //   c 151.3 -311.64 95.92 -107.95 -97.39 53.51
  //   c -177.51 138.63 -192.42 91.36 -16 307.97
  //   c -.53 307.84 130.78 -.11 106.93 -171.29
  //   c 183.57 -265.66 175.73 -56.43 -4.69 -112.46
  //   c -14.9-140.7-73.15-38.63-79.67,25.7-200.45,84.76-249.65,91.19-75.96,228.6-74.37,309.77,14.32,47.01,51.36,40.78,120.62,20.82,180.14-30.26,90.21-93.55,120.19-189.55,131.21-238.32,27.36-483.78-50.9-638.31-237.7
  //   C 35.7,1227.68,5.53,1117.11.85,1016.2
  //   c -7.43 -160.24 103.71 -302.31 219.56 -399.04
  //   c 207.76 -173.45 513.5 -130.19 697.22
  //   c 55.03 93.37 94.13 207.11 242.14
  //   c 146.81 383.39 -29.44 68.96 -95.28 107.46
  //   c -158.34 139.6 -114.62 58.42 -253.03 57.51
  //   -375.19 34.61
  //   l -81.49-15.27
  //   c -83.56-23.64-152.32-67.81-206.3-132.49-62.53-49.61-104.75-114.04-126.65-193.3-27.08-70.95-26.08-139.41,2.98-205.38,6.43-21.38,12.86-42.77,19.29-64.15,54.21-86.89,132.42-138.13,234.63-153.72,165.78-20.58,335.38,33.54,452.88,155.21,62.13,64.33,133.2,150.69,160.27,235.91,31.77,100.02,50.1,230.31-44.52,306.89-69.28,56.08-152.29,75.78-241.8,65.84-88.41-10.38-164.3-44.89-227.69-103.53-71.78-42.21-125.09-102.39-159.91-180.54-25.03-69.11-52.35-165.01-.28-230.87,78.26-98.99,221.6-34.28,293.67,30.93,59.32,53.68,98.55,127.72,120.07,204.03,22.23,70.2,12.9,135.34-27.97,195.41-26.8,19.07-53.61,38.13-80.41,57.2-58.77,30.95-139.25,22.68-197.77-5.77-93.64-45.53-108-179.04-78.96-266.16,25.02-75.06,90.4-98.43,160.65-95.34,41.87-3.61,79.97,8.2,114.29,35.41,33.81,28.81,41.52,60.91,23.12,96.33-15.35,58.79-52.92,96.75-99.01,134.54-69.98,57.39-138.49,89.44-229.45,86.85-13.59-27.46-5.01-46.16,25.74-56.1,37.7-34.85,83.08-56.09,136.14-63.72,68.56-14.54,146.07-21.56,215.1-5.12,85.3,20.32,135.09,97.24,77.26,176.53-62.41,85.58-171.97,130.04-269.56,156.71-68.68,18.77-229.53,53.03-283.64-18.96-11.08-22.87-22.15-45.74-33.23-68.61,12.65-52.04,43.76-83.95,93.33-95.72,84.77-40.36,182.82-55.04,276.71-42.8,26.79,5.9,53.59,11.79,80.38,17.69,39.7,6.32,61.02,27.72,63.95,64.2-85.96,74.72-227.73,87.48-330.77,33.98-161.39-83.8-175.07-315.34-89.34-457.69,108.14-179.57,356.91-221.2,543.28-163.42,101.09,31.35,283.16,127.84,285.68,257.57,2.98,153.42-241.48,156.09-337.99,130.87-132.02-34.51-271.6-104.11-323.76-239.99-75.72-197.28,53.41-371.36,235.97-434.76,177.71-61.71,384.06-35.74,541.76,65.23,68.55,37.25,118.5,91.34,149.86,162.25,22.59,79.76,13.59,156.27-27.01,229.52-57.17,97.68-134.58,175.86-232.22,234.51-114.22,73.84-235.28,133.84-363.18,180-125.75,45.45-621.53,216.06-622.5-50.75,6.99-58.9,26.3-113.54,57.93-163.9,22.32-45.45,52.97-84.1,91.95-115.95,77.88-43.55,180.56,14.88,223.24,82.33,77.39,122.29-17.01,244.79-106,326.2-54.04,48.71-113.24,89.94-177.6,123.69-47.9,34.69-94.99,35.82-141.28,3.4-18.32-95.55.35-185.46,56.01-269.73,55.94-114.6,127.05-218.77,213.33-312.51,48.02-60.95,106.94-105.86,176.74-134.73,46.2-36.85,97.72-42.41,154.56-16.67,63.58,66.51,88.43,146.59,74.55,240.26-2.29,87.3-25.03,167.91-68.21,241.84-74.26,156.18-202.17,306.96-362.74,381.49-51.18,32.77-105.01,40.52-161.49,23.27-9.39-16.92-18.78-33.83-28.18-50.75,3.36-57.39,26.08-106.08,68.16-146.07,45.48-44.74,99.91-70.59,163.28-77.55,75.61.79,145.07,29.51,155.35,115.2,2.65,46.59-9.34,88.97-35.97,127.13-19.81,31.81-47.95,47.77-84.4,47.89-32.82-23.15-39.25-54.61-19.3-94.38,18.95-55.1,49.88-102.43,92.79-141.99,51.97-50.84,135.96-119.95,213.27-104.28-5.11,46.12-42.87,79.22-82.63,102.81-15.7,8.17-31.41,16.34-47.11,24.51-27.14,16.23-47.96,12.31-62.48-11.76,47.01-97.5,184.03-186.48,296.97-165.21,49.41,9.3,83.23,40.22,74.04,92.3-10.48,59.35-73.62,106.67-127.62,126.41-28.96,7.68-57.93,15.36-86.89,23.03-51.08,11-89.03-3.29-113.83-42.86-30.31-19.37-41.14-47.19-32.48-83.46-10.9-58.45,1.29-113.74,36.58-165.85,37.9-61.11,88.47-113.73,154.33-144.44,43.46-20.27,166.96-32.52,185.34,40.34,10.58,41.92-7.16,77.67-35.76,107.62-56.32,58.96-169.76,37.18-233.96,14.11-68.56-15.87-122.35-55.68-161.37-119.43-17.15-55.75-34.31-111.49-51.46-167.24,11.78-75.42,23.56-150.83,35.35-226.25,39.58-124.53,100.39-236.55,182.42-336.05,57.56-91.89,130.22-170.45,217.97-235.7,48.07-27.91,96.14-55.83,144.21-83.74,45.04-10.37,90.08-20.75,135.12-31.12,65.1-5.74,116.53,15,154.3,62.22,154.03,140.61,156.87,398.2,103.59,584.96-29.11,102.03-77.78,209.85-158.15,282.64-73.26,66.34-159.22,113.78-252.27,146.32-255.7,89.4-556.61-26.47-667.3-276.29-30.22-67.07-33.17-133.41-8.86-199.02,2.14-46.02,19.66-85.08,52.58-117.19,31.22-57.8,79.24-97.88,144.06-120.23,41.79-8.28,83.59-16.56,125.38-24.85,104.53-3.49,210.93,39.46,295.75,95.76,79.37,52.69,142.29,131.73,160.24,229.07,18.69,101.37,8.92,195.72-43.57,285.86-32.85,56.43-89.75,137.2-155.39,159.08-28.7,9.57-76.24,22.15-97.47-10.24-29.74-45.38,33.84-130.32,69.44-148.25,25.58-12.89,69.74-28.59,94.85-4.13,42.82,41.7-10.01,112.34-36.74,143.03-74.55,85.59-197.47,152.75-314.58,138.2,2.02-34.18,76.46,17.53,81.79,24.57,41.03,54.17-3.17,108.67-48.62,138.78-45.2,29.94-124.17,60.89-174.59,21.75-55.41-43.02-23.75-125.97-9.37-179.96
  // `
}
