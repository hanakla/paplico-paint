import { GetServerSideProps } from 'next'
import styled from 'styled-components'

import { Button } from 'ðŸ™Œ/components/Button'
import { Stack } from 'ðŸ™Œ/components/Stack'
import { DevLayout } from 'ðŸ™Œ/layouts/DevLayout'
import { benchCase } from 'ðŸ™Œ/features/Debug/benchCase'

const cases = {
  imageDrawing: benchCase({
    name: 'putImageData vs drawImage',
    init: async () => {
      const imageData = new ImageData(1000, 1000)
      const canvas = document.createElement('canvas')
      canvas.width = imageData.width
      canvas.height = imageData.height

      return {
        ctx: canvas.getContext('2d')!,
        data: imageData,
        bitmap: await createImageBitmap(imageData),
      }
    },
    cases: [
      {
        name: 'putImageData',
        run: ({ ctx, data }) => {
          ctx.putImageData(data, 0, 0)
        },
      },
      {
        name: 'drawImage',
        run: ({ ctx, bitmap }) => {
          ctx.drawImage(bitmap, 0, 0)
        },
      },
    ],
    iterate: 1000,
  }),
  imageBitmap: benchCase({
    name: 'createImageBitmap',
    init: async () => {
      const imageData = new ImageData(1000, 1000)
      return { imageData }
    },
    cases: [
      {
        name: 'test',
        run: async ({ imageData }) => {
          await createImageBitmap(imageData)
        },
      },
    ],
    iterate: 1000,
  }),
  parseSvgPath: benchCase({
    name: 'Parse SVG Path',
    init: async () => {
      return {
        path: 'M1626.188720703125,202.5666046142578 C 1613.950439453125,-11.742095947265653 1443.7177734375,492.14013671875 1554.703857421875 397.7297058105469 C 1665.68994140625,303.31927490234375 1579.3966064453125,491.8595275878906 1470.009765625 569.333984375 C 1360.6229248046875,646.8084411621094 1375.185302734375,671.330078125 1535.743408203125 696.9267578125 C 1696.301513671875,722.5234375000001 1565.7598876953125,872.9951782226562 1489.6851806640625 964.3666381835938 C 1413.6104736328125,1055.7380981445312 1376.083740234375,963.3690795898438 1383.8258056640625 907.704345703125 C 1391.56787109375,852.0396118164062 608.4907836914062,760.5623779296875 605.602294921875 760.5623779296875 C 602.7138061523438,760.5623779296875 483.2503356933594,718.668212890625 344.6506042480469 592.1871337890625 C 206.05087280273438,465.7060546875 446.93231201171875,605.4064331054688 690.662353515625 369.32232666015625 C 934.3923950195315,133.23822021484392 1589.2154541015625,385.75640869140625 1510.117431640625 153.04403686523438 C 1431.0194091796875,-79.6683349609375 829.0064086914062,966.8194580078125 1215.552734375 626.3444213867188 C 1602.099060058594,285.8693847656253 720.3424072265625,470.3819274902344 911.3743896484375 427.2532653808594 C 1102.4063720703125,384.1246032714844 1355.3837890625,1053.65380859375 1634.1890869140625 755.5382080078125 C 1912.994384765625,457.42260742187494 1498.4434814453125,847.3924560546875 1058.9906005859375 975.0885009765625 C 619.5377197265625,1102.7845458984377 1031.9642333984375,481.48468017578125 1127.8997802734375 287.9900817871094 C 1223.8353271484375,94.4954833984375 1284.48095703125,663.2161865234375 1473.021484375 552.5615234375 C 1661.56201171875,441.9068603515624 1451.31396484375,418.27313232421875 1193.4019775390625 496.415771484375 C 935.4899902343751,574.5584106445316 919.1832275390625,417.7677001953125 1014.0436401367188 218.84300231933594 C 1108.904052734375,19.918304443359347 1235.55322265625,249.8209991455078 1325.888671875 85.16619110107422 C 1416.22412109375,-79.4886169433594 1473.542724609375,53.236083984375 1717.4091796875 153.324462890625 C 1961.275634765625,253.4128417968751 1610.176513671875,570.3140258789062 1452.8817138671875 473.86077880859375 C 1295.5869140625,377.4075317382813 1304.455322265625,525.1160278320312 1294.3822021484375 366.1955261230469 C 1284.30908203125,207.27502441406253 1556.038818359375,983.2511596679688 1246.4871826171875 919.1622314453125 C 936.935546875,855.0733032226562 1317.1837158203125,573.4136962890625 1531.857421875 646.28662109375 C 1746.5311279296875,719.1595458984376 1803.2235107421875,383.4736022949219 1688.7896728515625 258.2949523925781 C 1574.3558349609375,133.11630249023438 1282.4874267578125,559.7650756835938 1379.421142578125 280.50921630859375 C 1476.3548583984377,1.2533569335938068 1435.3563232421875,356.1576843261719 1207.796142578125 254.330078125 C 980.2359619140625,152.50247192382812 1111.4996337890625,-139.51397705078125 940.70703125 64.99295806884766 C 769.9144287109375,269.4998931884765 938.0574340820312,172.93276977539062 598.454345703125 201.69741821289062 C 258.8512573242187,230.46206665039065 360.98858642578125,525.007080078125 1142.6787109375 730.119873046875 C 1924.368835449219,935.2326660156242 1346.80029296875,911.8756103515625 1801.897705078125 891.187744140625 C 2256.9951171875,870.4998779296869 1597.4686279296875,604.5609130859375 1465.1376953125 281.3932800292969 ',
        parse: require('parse-svg-path'),
        fastParse: require('ðŸ™Œ/../../paplicore/src/fastsvg/parse.ts')
          .parseSVGPath,
      }
    },
    cases: [
      {
        name: 'original',
        run: async ({ path, parse }) => {
          parse(path)
        },
      },
      {
        name: 'hanakla mod',
        run: async ({ path, fastParse }) => {
          fastParse(path)
        },
      },
    ],
    iterate: 10000,
  }),
  pathBounds: benchCase({
    name: 'pathBounds',
    init: async () => {
      return {
        path: 'M1626.188720703125,202.5666046142578 C 1613.950439453125,-11.742095947265653 1443.7177734375,492.14013671875 1554.703857421875 397.7297058105469 C 1665.68994140625,303.31927490234375 1579.3966064453125,491.8595275878906 1470.009765625 569.333984375 C 1360.6229248046875,646.8084411621094 1375.185302734375,671.330078125 1535.743408203125 696.9267578125 C 1696.301513671875,722.5234375000001 1565.7598876953125,872.9951782226562 1489.6851806640625 964.3666381835938 C 1413.6104736328125,1055.7380981445312 1376.083740234375,963.3690795898438 1383.8258056640625 907.704345703125 C 1391.56787109375,852.0396118164062 608.4907836914062,760.5623779296875 605.602294921875 760.5623779296875 C 602.7138061523438,760.5623779296875 483.2503356933594,718.668212890625 344.6506042480469 592.1871337890625 C 206.05087280273438,465.7060546875 446.93231201171875,605.4064331054688 690.662353515625 369.32232666015625 C 934.3923950195315,133.23822021484392 1589.2154541015625,385.75640869140625 1510.117431640625 153.04403686523438 C 1431.0194091796875,-79.6683349609375 829.0064086914062,966.8194580078125 1215.552734375 626.3444213867188 C 1602.099060058594,285.8693847656253 720.3424072265625,470.3819274902344 911.3743896484375 427.2532653808594 C 1102.4063720703125,384.1246032714844 1355.3837890625,1053.65380859375 1634.1890869140625 755.5382080078125 C 1912.994384765625,457.42260742187494 1498.4434814453125,847.3924560546875 1058.9906005859375 975.0885009765625 C 619.5377197265625,1102.7845458984377 1031.9642333984375,481.48468017578125 1127.8997802734375 287.9900817871094 C 1223.8353271484375,94.4954833984375 1284.48095703125,663.2161865234375 1473.021484375 552.5615234375 C 1661.56201171875,441.9068603515624 1451.31396484375,418.27313232421875 1193.4019775390625 496.415771484375 C 935.4899902343751,574.5584106445316 919.1832275390625,417.7677001953125 1014.0436401367188 218.84300231933594 C 1108.904052734375,19.918304443359347 1235.55322265625,249.8209991455078 1325.888671875 85.16619110107422 C 1416.22412109375,-79.4886169433594 1473.542724609375,53.236083984375 1717.4091796875 153.324462890625 C 1961.275634765625,253.4128417968751 1610.176513671875,570.3140258789062 1452.8817138671875 473.86077880859375 C 1295.5869140625,377.4075317382813 1304.455322265625,525.1160278320312 1294.3822021484375 366.1955261230469 C 1284.30908203125,207.27502441406253 1556.038818359375,983.2511596679688 1246.4871826171875 919.1622314453125 C 936.935546875,855.0733032226562 1317.1837158203125,573.4136962890625 1531.857421875 646.28662109375 C 1746.5311279296875,719.1595458984376 1803.2235107421875,383.4736022949219 1688.7896728515625 258.2949523925781 C 1574.3558349609375,133.11630249023438 1282.4874267578125,559.7650756835938 1379.421142578125 280.50921630859375 C 1476.3548583984377,1.2533569335938068 1435.3563232421875,356.1576843261719 1207.796142578125 254.330078125 C 980.2359619140625,152.50247192382812 1111.4996337890625,-139.51397705078125 940.70703125 64.99295806884766 C 769.9144287109375,269.4998931884765 938.0574340820312,172.93276977539062 598.454345703125 201.69741821289062 C 258.8512573242187,230.46206665039065 360.98858642578125,525.007080078125 1142.6787109375 730.119873046875 C 1924.368835449219,935.2326660156242 1346.80029296875,911.8756103515625 1801.897705078125 891.187744140625 C 2256.9951171875,870.4998779296869 1597.4686279296875,604.5609130859375 1465.1376953125 281.3932800292969 ',
        bounds: require('svg-path-bounds'),
        fastBounds: require('ðŸ™Œ/../../paplicore/src/fastsvg/pathBounds.ts')
          .pathBounds,
      }
    },
    cases: [
      {
        name: 'original',
        run: async ({ path, bounds }) => {
          bounds(path)
        },
      },
      {
        name: 'hanakla mod',
        run: async ({ path, fastBounds }) => {
          fastBounds(path)
        },
      },
    ],
    iterate: 10000,
  }),
}

export default function Debug() {
  return (
    <DevLayout>
      <Stack
        css={`
          display: grid;
          grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));
          padding: 8px;
        `}
        dir="vertical"
      >
        {Object.entries(cases).map(([key, entry]) => (
          <ItemButton
            kind="normal"
            onClick={() => {
              entry.run()
            }}
          >
            {entry.name}
          </ItemButton>
        ))}
      </Stack>
    </DevLayout>
  )
}

export const getServerSideProps: GetServerSideProps = async (ctx) => {
  return {
    props: {},
    notFound: process.env.NODE_ENV !== 'production' ? false : true,
  }
}

const ItemButton = styled(Button)`
  width: 100px;
  height: 100px; ;
`
