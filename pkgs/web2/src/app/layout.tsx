'use client'

import { ThemeProvider, createGlobalStyle } from 'styled-components'
import { ServerStyleSheet, StyleSheetManager } from 'styled-components'
import { light, dark } from '@charcoal-ui/theme'
import {
  TokenInjector,
  prefersColorScheme,
  themeSelector,
} from '@charcoal-ui/styled'
import reset from 'styled-reset'
import React, { useState } from 'react'
import { useServerInsertedHTML } from 'next/navigation'

// export const metadata = {
//   title: 'Next.js',
//   description: 'Generated by Next.js'
// }

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <GlobalStyle />

      <body>
        <StyledComponentsRegistry>
          <ThemeProvider theme={light}>
            <TokenInjector
              theme={{
                ':root': light,
                [themeSelector('light')]: light,
                [themeSelector('dark')]: dark,
                [prefersColorScheme('dark')]: dark,
              }}
              background="background1"
            />
            {children}
          </ThemeProvider>
        </StyledComponentsRegistry>
      </body>
    </html>
  )
}

const GlobalStyle = createGlobalStyle`
  ${reset}

  html, body {
    width: 100%;
    height: 100%;
    margin: 0;
    padding: 0;
  }
`

function StyledComponentsRegistry({ children }: { children: React.ReactNode }) {
  // Only create stylesheet once with lazy initial state
  // x-ref: https://reactjs.org/docs/hooks-reference.html#lazy-initial-state
  const [styledComponentsStyleSheet] = useState(() => new ServerStyleSheet())

  useServerInsertedHTML(() => {
    const styles = styledComponentsStyleSheet.getStyleElement()
    styledComponentsStyleSheet.instance.clearTag()
    return <>{styles}</>
  })

  if (typeof window !== 'undefined') return <>{children}</>

  return (
    <StyleSheetManager sheet={styledComponentsStyleSheet.instance}>
      {children}
    </StyleSheetManager>
  )
}
